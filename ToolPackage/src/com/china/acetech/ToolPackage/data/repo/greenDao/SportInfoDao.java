package com.china.acetech.ToolPackage.data.repo.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.china.acetech.ToolPackage.data.repo.greenDao.SportInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SPORT_INFO.
*/
public class SportInfoDao extends AbstractDao<SportInfo, Long> {

    public static final String TABLENAME = "SPORT_INFO";

    /**
     * Properties of entity SportInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Calendar = new Property(1, java.util.Date.class, "calendar", false, "CALENDAR");
        public final static Property Number = new Property(2, Integer.class, "number", false, "NUMBER");
        public final static Property Timestyle = new Property(3, Integer.class, "timestyle", false, "TIMESTYLE");
        public final static Property Steps = new Property(4, Integer.class, "steps", false, "STEPS");
        public final static Property Distance = new Property(5, Integer.class, "distance", false, "DISTANCE");
        public final static Property Calories = new Property(6, Integer.class, "calories", false, "CALORIES");
        public final static Property Active = new Property(7, Long.class, "active", false, "ACTIVE");
        public final static Property Floor = new Property(8, Integer.class, "floor", false, "FLOOR");
        public final static Property Sleepstatus = new Property(9, Integer.class, "sleepstatus", false, "SLEEPSTATUS");
        public final static Property Lastsynctime = new Property(10, java.util.Date.class, "lastsynctime", false, "LASTSYNCTIME");
    };


    public SportInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SportInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SPORT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CALENDAR' INTEGER," + // 1: calendar
                "'NUMBER' INTEGER," + // 2: number
                "'TIMESTYLE' INTEGER," + // 3: timestyle
                "'STEPS' INTEGER," + // 4: steps
                "'DISTANCE' INTEGER," + // 5: distance
                "'CALORIES' INTEGER," + // 6: calories
                "'ACTIVE' INTEGER," + // 7: active
                "'FLOOR' INTEGER," + // 8: floor
                "'SLEEPSTATUS' INTEGER," + // 9: sleepstatus
                "'LASTSYNCTIME' INTEGER);"); // 10: lastsynctime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SPORT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SportInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date calendar = entity.getCalendar();
        if (calendar != null) {
            stmt.bindLong(2, calendar.getTime());
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(3, number);
        }
 
        Integer timestyle = entity.getTimestyle();
        if (timestyle != null) {
            stmt.bindLong(4, timestyle);
        }
 
        Integer steps = entity.getSteps();
        if (steps != null) {
            stmt.bindLong(5, steps);
        }
 
        Integer distance = entity.getDistance();
        if (distance != null) {
            stmt.bindLong(6, distance);
        }
 
        Integer calories = entity.getCalories();
        if (calories != null) {
            stmt.bindLong(7, calories);
        }
 
        Long active = entity.getActive();
        if (active != null) {
            stmt.bindLong(8, active);
        }
 
        Integer floor = entity.getFloor();
        if (floor != null) {
            stmt.bindLong(9, floor);
        }
 
        Integer sleepstatus = entity.getSleepstatus();
        if (sleepstatus != null) {
            stmt.bindLong(10, sleepstatus);
        }
 
        java.util.Date lastsynctime = entity.getLastsynctime();
        if (lastsynctime != null) {
            stmt.bindLong(11, lastsynctime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SportInfo readEntity(Cursor cursor, int offset) {
        SportInfo entity = new SportInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // calendar
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // timestyle
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // steps
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // distance
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // calories
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // active
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // floor
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sleepstatus
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // lastsynctime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SportInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCalendar(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTimestyle(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSteps(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDistance(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCalories(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setActive(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setFloor(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSleepstatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLastsynctime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SportInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SportInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
